scalar Date

type User
{
	id: ID!
	type: String
	email: String
	username: String
	password: String
}

type Guest
{
	id: ID!
	firstName: String!
	lastName: String!
	room: Room!
}

type Reservation
{
	id: ID!
	checkIn: Date!
	checkOut: Date!
	user: User
	guests: [Guest]
}

type Room
{
	id: ID
	type: String
	perks: String
	numberOfBeds: Int
	rate: Int
}

type Voucher
{
	id: ID
	type: String
	amount: Int
	issue_date: Date!
	expiry_date: Date!
}

input UserInput
{
	id: ID
	type: String
	email: String
	username: String
	password: String
}

input GuestInput
{
	id: ID
	firstName: String
	lastName: String
	roomId: ID
}

input ReservationInput
{
	id: ID
	checkIn: Date
	checkOut: Date
	user: UserInput
	guests: [GuestInput]
}

input RoomInput
{
	id: ID
	type: String
	perks: String
	numberOfBeds: Int
	rate: Int
}

type Query
{
	reservationById(id: ID!): Reservation
	allRooms: [Room]
	roomById(id: ID!): Room
	availableRoomsByDates(checkIn: Date!, checkOut: Date!): [Room]
	loginUser(input: UserInput): User
}

type Mutation
{
	createReservation(input: ReservationInput): Reservation
	removeReservation(input: ReservationInput): Reservation
	createRoom(input: RoomInput): Room
	createRooms(input: [RoomInput]): [Room]
	removeRoom(input: RoomInput): Room
	removeRooms(input: [RoomInput]): [Room]
	createUser(input: UserInput): User
	removeUser(input: UserInput): User
}